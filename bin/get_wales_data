#!/usr/bin/gawk -f

@load "json"

# output
#  1 guid 
#  2 AHRS
#  3 Site
#  4 Year
#  5 What
#  6 Mat
#  7 Loc
# 11 Strat
# 12 Quad
# 13 Square
# 14 Coll
# 15 IDby
# 16 Prep
# 17 Media
# 18 Thumb

BEGIN{
  DEBUG = 0
  F="guid,othercatalognumbers,collectors,identified_by,preparators,"    \
    "attributedetail,media,began_date,scientific_name,spec_locality"
  # extract square, quadrant, stratigraphic_position, materials from attrs
  
  get("UA2020-134")
  get("UA2020-135")
  get("UA2020-136")
}

function get(accn,        cmd, json, data) {
  print "Getting " accn > "/dev/stderr"
  
  cmd = "curl -s -X POST "                                              \
    "--data 'api_key=74B39D7C-65A5-4CA1-A396AD90F2095398' "             \
    "--data 'method=getCatalogData' "                                   \
    "--data 'length=100' "                                              \
    "--data 'cols=" F "' "                                              \
    "--data 'accn_number=" accn "' "                                \
    "'https://arctos.database.museum/component/api/v2/catalog.cfc'"

  RS="\x04"
  cmd | getline json
  if (! json::from_json(json, data)) {
    if (DEBUG)
      walk_array(data, "data")
    
    error("API JSON import failed!")
  }

  # walk_array(data, "data")
  # exit

  if (data["tbl"]) {
    table = data["tbl"]
    size = data["recordsTotal"]
  }
  else
    exit 1
  
  for (req = 1; req <= size ; req += 100) {
    print "  part " req " of " size " recs" > "/dev/stderr"
    
    cmd = "curl -s -X POST "                                            \
      "--data 'api_key=74B39D7C-65A5-4CA1-A396AD90F2095398' "           \
      "--data 'method=getCatalogData' "                                 \
      "--data 'tbl=" table "' "                                         \
      "--data 'srt=guid' "                                              \
      "--data 'start= " req "' "                                        \
      "--data 'length=100' "                                            \
      "'https://arctos.database.museum/component/api/v2/catalog.cfc'"
    
    # print cmd > "/dev/stderr"
    
    RS="\x04"
    cmd | getline json
    if (! json::from_json(json, data)) {
      if (DEBUG)
        walk_array(data, "data")
      error("API JSON import failed!")
    }
    
    PROCINFO["sorted_in"] = "@ind_num_asc"
    OFS = "|"
    for (i in data["DATA"]["DATA"]) {
      # fix pipes
      for (j in data["DATA"]["DATA"][i])
        gsub(/\|/ , ":", data["DATA"]["DATA"][i][j])

      # get media
      media = thumb = ""
      if (data["DATA"]["DATA"][i][8]) {
        json::from_json(data["DATA"]["DATA"][i][8], m)
        for (j in m) {
          media = media "," m[j]["MU"]
          thumb = thumb "," m[j]["PU"]
        }
        gsub(/^,/,"",media)
        gsub(/^,/,"",thumb)
      }

      # get attributes
      if (data["DATA"]["DATA"][i][7]) {
        json::from_json(data["DATA"]["DATA"][i][7], m)
        for (j in m) {
          att[m[j]["attribute_type"]] = att[m[j]["attribute_type"]] \
            m[j]["attribute_value"] ", "
        }
      }

      ahrs = (data["DATA"]["DATA"][i][3] ~                              \
              /AHRS \(Alaska Heritage Resources Survey\) [A-Z]+-[0-9]+/) ? \
        gensub(/.*AHRS \(Alaska Heritage Resources Survey\) ([^ ]+).*/, \
               "\\1", "G", data["DATA"]["DATA"][i][3]) : ""
      loc = (data["DATA"]["DATA"][i][3] ~ /Locality ID ([^:]+)/) ?      \
        gensub(/.*Locality ID ([^:]+).*/,                               \
               "\\1", "G", data["DATA"]["DATA"][i][3]) : ""
      
      print data["DATA"]["DATA"][i][2],                                 \
        ahrs, loc,                                                      \
        substr(data["DATA"]["DATA"][i][9],1,4),                         \
        data["DATA"]["DATA"][i][10],                                    \
        gensub(/, $/,"","G",att["materials"]),                         \
        data["DATA"]["DATA"][i][11],                                    \
        "" , "" , "",                                                   \
        gensub(/, $/,"","G",att["stratigraphic position"]),            \
        gensub(/, $/,"","G",att["quadrant"]),                          \
        gensub(/, $/,"","G",att["square"]),                            \
        data["DATA"]["DATA"][i][4],                                     \
        data["DATA"]["DATA"][i][5],                                     \
        data["DATA"]["DATA"][i][6],                                     \
        media, thumb

      delete att
    }
  }
}


function error(msg) {
  print "Error: " msg > "/dev/stderr"
  exit 1
}

function walk_array(arr, name,      i, s) {
  for (i in arr) {
    if (isarray(arr[i]))
      walk_array(arr[i], (name "[" i "]"))
    else {
      # printf("%s[%s] = %s\n", name, i, arr[i])
      s = sprintf("%s[%s] = %s", name, i, arr[i])
      print gensub(/\[([^0-9][^]]*)\]/,"[\"\\1\"]","G",s)
    }
  }
}


